# Multi-stage Dockerfile for mcp-memory-libsql-go

FROM golang:1.24.3-alpine AS build
WORKDIR /src
RUN apk add --no-cache ca-certificates git build-base musl-dev gcc
COPY go.mod go.sum ./
RUN go mod tidy
COPY . .
# Build static binary
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -trimpath -ldflags "-s -w" -o /out/mcp-memory-libsql-go ./cmd/mcp-memory-libsql-go

FROM alpine:3.20
RUN addgroup -S app && adduser -S app -G app
WORKDIR /app
RUN apk add --no-cache ca-certificates tzdata
COPY --from=build /out/mcp-memory-libsql-go /usr/local/bin/mcp-memory-libsql-go
USER app

# Default env
ENV LIBSQL_URL="file:/data/libsql.db"
ENV EMBEDDING_DIMS=4
ENV METRICS_PROMETHEUS=""
ENV METRICS_ADDR=":9090"

# Volumes and ports
VOLUME ["/data"]
EXPOSE 8080 9090

# Healthcheck hits metrics healthz if enabled, otherwise process check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s CMD wget -qO- http://127.0.0.1:9090/healthz || pgrep -x mcp-memory-libsql-go >/dev/null || exit 1

ENTRYPOINT ["/usr/local/bin/mcp-memory-libsql-go"]
CMD ["-transport", "sse"]
